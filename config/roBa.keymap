#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        escape {
            bindings = <&kp ESCAPE>;
            key-positions = <0 1>;
        };

        tabcombo {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        slash {
            bindings = <&kp SLASH>;
            key-positions = <18 19>;
        };

        single_quotes {
            bindings = <&kp SINGLE_QUOTE>;
            key-positions = <27 26>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q           &kp W         &kp E         &kp R                 &kp T                                           &kp Y          &kp U    &kp I  &kp O      &kp P
&kp A           &kp S         &kp D         &kp F                 &kp G      &kp ESCAPE                &kp MINUS  &kp H          &lt 2 J  &kp K  &lt 5 L    &lt 1 RETURN
&kp LCTRL       &kp Z         &kp X         &kp C                 &kp V      &kp DOUBLE_QUOTES         &kp EQUAL  &kp B          &kp N    &kp M  &kp COMMA  &kp DOT
&kp LEFT_SHIFT  &kp LEFT_WIN  &kp LEFT_ALT  &mt LEFT_SHIFT LANG2  &kp SPACE  &mt LEFT_SHIFT LANG1      &kp TAB    &kp BACKSPACE                             &kp SLASH
            >;

            sensor-bindings = <&inc_dec_kp PAGE_UP PAGE_DOWN>;
        };

        ARROW_SYMBOL {
            bindings = <
&kp EXCL              &kp AT_SIGN            &kp HASH           &kp CARET       &kp AMPERSAND                                          &kp LC(X)            &kp LC(C)       &kp UP_ARROW     &kp LC(V)  &trans
&kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp COLON          &kp BACKSLASH   &kp GRAVE        &trans            &kp LC(LS(TAB))     &kp HOME             &kp LEFT        &kp RIGHT_ARROW  &trans     &trans
&trans                &kp LEFT_BRACKET       &kp RIGHT_BRACKET  &kp LEFT_BRACE  &kp RIGHT_BRACE  &kp SEMI          &kp LC(TAB)         &kp END              &kp DOWN_ARROW  &trans           &trans     &trans
&trans                &trans                 &trans             &trans          &trans           &kp ASTERISK      &kp LA(LEFT_ARROW)  &kp LA(RIGHT_ARROW)                                              &trans
            >;

            sensor-bindings = <&inc_dec_kp PAGE_UP PAGE_DOWN>;
        };

        FUNCTION {
            bindings = <
&kp N1      &kp N2       &kp N3  &kp N4  &kp N5                           &kp F2      &trans  &kp LG(NUMBER_1)  &kp LG(NUMBER_2)  &kp LG(NUMBER_3)
&kp N6      &kp N7       &kp N8  &kp N9  &kp N0   &bt BT_CLR      &trans  &kp F5      &trans  &kp LG(NUMBER_4)  &kp LG(N5)        &kp LG(NUMBER_6)
&kp DOLLAR  &kp PERCENT  &trans  &trans  &kp DOT  &trans          &trans  &kt F7      &trans  &trans            &trans            &trans
&trans      &trans       &trans  &trans  &trans   &trans          &trans  &kp DELETE                                              &to 3
            >;
        };

        ClipStudio {
            bindings = <
&kp N0         &kp LC(SPACE)  &kp E      &kp I      &trans                                       &trans      &trans  &trans  &trans  &trans
&kp LS(SPACE)  &kp LC(S)      &kp B      &kp P      &kp G      &trans                    &trans  &trans      &trans  &trans  &trans  &trans
&trans         &kp LC(Z)      &kp LC(X)  &kp LC(C)  &kp LC(V)  &kp LC(LA(KP_EQUAL))      &trans  &trans      &trans  &trans  &trans  &trans
&trans         &trans         &trans     &trans     &kp SPACE  &trans                    &trans  &kp DELETE                          &to 0
            >;

            sensor-bindings = <&inc_dec_kp LC(RBKT) LC(LEFT_BRACKET)>;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans    &trans    &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans    &mkp MB2  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp MB1  &mkp MB3  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                              &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans    &trans    &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans    &mkp MB2  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp MB1  &mkp MB3  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                              &trans
            >;
        };
    };
};
